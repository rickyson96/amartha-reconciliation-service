// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package transactions

import (
	"errors"
	"fmt"
)

const (
	// TransactionTypeCredit is a TransactionType of type CREDIT.
	TransactionTypeCredit TransactionType = iota
	// TransactionTypeDebit is a TransactionType of type DEBIT.
	TransactionTypeDebit
)

var ErrInvalidTransactionType = errors.New("not a valid TransactionType")

const _TransactionTypeName = "CREDITDEBIT"

var _TransactionTypeMap = map[TransactionType]string{
	TransactionTypeCredit: _TransactionTypeName[0:6],
	TransactionTypeDebit:  _TransactionTypeName[6:11],
}

// String implements the Stringer interface.
func (x TransactionType) String() string {
	if str, ok := _TransactionTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("TransactionType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TransactionType) IsValid() bool {
	_, ok := _TransactionTypeMap[x]
	return ok
}

var _TransactionTypeValue = map[string]TransactionType{
	_TransactionTypeName[0:6]:  TransactionTypeCredit,
	_TransactionTypeName[6:11]: TransactionTypeDebit,
}

// ParseTransactionType attempts to convert a string to a TransactionType.
func ParseTransactionType(name string) (TransactionType, error) {
	if x, ok := _TransactionTypeValue[name]; ok {
		return x, nil
	}
	return TransactionType(0), fmt.Errorf("%s is %w", name, ErrInvalidTransactionType)
}
